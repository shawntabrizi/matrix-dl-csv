#!/usr/bin/python3
import os
import argparse
import datetime
import sys
import os
import re
import getpass
import json
import csv

from matrix_client.client import MatrixClient

DATE_FORMAT = '%d%m%Y'

class Colors:
    plat = sys.platform
    supported_platform = plat != 'Pocket PC' and (plat != 'win32' or
                                                  'ANSICON' in os.environ)
    # isatty is not always implemented, #6223.
    is_a_tty = hasattr(sys.stdout, 'isatty') and sys.stdout.isatty()
    if not supported_platform or not is_a_tty:
        HEADER = ''
        OKBLUE = ''
        OKGREEN = ''
        WARNING = ''
        FAIL = ''
        ENDC = ''
    else:
        HEADER = '\033[95m'
        OKBLUE = '\033[94m'
        OKGREEN = '\033[92m'
        WARNING = '\033[93m'
        FAIL = '\033[91m'
        ENDC = '\033[0m'
    force_disable = False

    @classmethod
    def disable(cls):
        cls.HEADER = ''
        cls.OKBLUE = ''
        cls.OKGREEN = ''
        cls.WARNING = ''
        cls.FAIL = ''
        cls.ENDC = ''

    @classmethod
    def enable(cls):
        if cls.force_disable:
            return

        cls.HEADER = '\033[95m'
        cls.OKBLUE = '\033[94m'
        cls.OKGREEN = '\033[92m'
        cls.WARNING = '\033[93m'
        cls.FAIL = '\033[91m'
        cls.ENDC = '\033[0m'


class MatrixLogGetter:
    def __init__(self):
        self.matrix_url = "https://matrix.igalia.com"
        self.username = None
        self.password = os.environ.get('MATRIX_PASSWORD', None)
        self.room = None
        self.client = None
        self.start_date = "01012017"
        self.end_date = None
        self.messages = []

    def run(self):
        self.client = MatrixClient(self.matrix_url)

        self.username, = self.username
        self.room, = self.room
        self.start_date = datetime.datetime.strptime(
            self.start_date, DATE_FORMAT).date()
        if self.end_date:
            self.end_date = datetime.datetime.strptime(
                self.end_date, DATE_FORMAT).date()

        if not self.password:
            self.password = getpass.getpass()

        print(self.username, "connecting to", self.matrix_url, file=sys.stderr)
        token = self.client.login_with_password(username=self.username,
                                                password=self.password)

        room = None
        rooms = self.client.get_rooms()
        try:
            room = rooms[self.room]
        except KeyError:
            for tmproom in rooms.values():
                if tmproom.name == self.room:
                    room = tmproom
                    break
        if not room:
            print("Could not find room %s" % self.room, file=sys.stderr)
            sys.exit(1)

        try:
            self.download(room)
        finally:
            self.print_messages()

    def download(self, room):
        token = room.prev_batch
        while True:
            res = self.client.api.get_room_messages(
                room.room_id, token, 'b', limit=10000)
            token = res['end']
            count = 0
            for event in res['chunk']:
                count += 1
                if event['type'] == 'm.room.message':
                    self.messages.insert(0, event)
            if count == 0:
                return
            ts = self.messages[0]['origin_server_ts'] / 1000
            date = datetime.datetime.fromtimestamp(ts).date()
            print("Getting messages before %s" % (date), file=sys.stderr)
            if date < self.start_date:
                return

    def print_messages(self):
        cday = None
        print("Got %s" % len(self.messages), file=sys.stderr)

        with open('output.csv', 'w', newline='') as csvfile:
            fieldnames = ['date', 'time', 'user', 'message']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            for message in self.messages:
                if message['type'] == 'm.room.message':
                    ts = message['origin_server_ts'] / 1000

                    date = datetime.datetime.fromtimestamp(ts).date()
                    if date < self.start_date:
                        continue

                    day = datetime.datetime.fromtimestamp(ts).strftime('%m-%d-%Y')
                    if day != cday:
                        cday = day
                        #print("==== %s%s%s ====" %
                        #   (Colors.HEADER, day, Colors.ENDC))
                    time = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')

                    try:
                        # IRC users
                        user = re.findall(r'_(.*?):', message['sender'])[0]
                    except IndexError:
                        # Matrix users
                        user = re.findall(r'(.*?):', message['sender'])[0]

                    try:
                        content = message['content']['body']
                    except:
                        content = ''
                    writer.writerow({'date': day, 'time': time, 'user': user, 'message': content})


if __name__ == "__main__":
    getter = MatrixLogGetter()

    parser = argparse.ArgumentParser(description='Download backlogs from Matrix'
                                     ' as raw test')
    parser.add_argument('username', nargs=1, type=str)
    parser.add_argument('room', nargs=1, type=str)
    parser.add_argument('--password', type=str, default=None,
                        help="Will be asked later if not provided via this "
                             "option or MATRIX_PASSWORD environment variable")
    parser.add_argument('--matrix-url', default=getter.matrix_url,
                        help="[default: %(default)s]")
    DATE_FORMAT_STR = '(format %s) [default: %%(default)s]' \
                      % DATE_FORMAT.replace('%', '%%')
    parser.add_argument('--start-date', default="01012017",
                        help='Starting day to consider %s' % DATE_FORMAT_STR)
    parser.add_argument('--end-date', default=None,
                        help='Last day to consider %s' % DATE_FORMAT_STR)

    options = parser.parse_args(namespace=getter)
    getter.run()
